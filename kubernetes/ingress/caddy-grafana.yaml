apiVersion: v1
kind: ConfigMap
metadata:
  name: caddy-grafana
  namespace: caddy-system
data:
  Caddyfile: |-
    {
      debug
      servers {
        metrics
      }
      admin :2019
    }
    :80 {
      redir https://grafana.unicorn-alligator.ts.net
    }
    grafana.unicorn-alligator.ts.net {
      reverse_proxy http://grafana.grafana.svc.cluster.local:80
      tls {
          get_certificate tailscale 
      }
    }
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: caddy-grafana
  namespace: caddy-system
spec:
  replicas: 1
  podManagementPolicy: "Parallel"
  updateStrategy:
    type: "RollingUpdate"
  selector:
    matchLabels:
      app.kubernetes.io/name: caddy-grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: caddy-grafana
      annotations:
        "prometheus.io/scrape": "true"
        "prometheus.io/port": "2019"
        bump: v6
    spec:
      serviceAccountName: tailscale
      securityContext: {}
      containers:
        - name: caddy-grafana
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
                - NET_BIND_SERVICE
              drop:
                - ALL
            runAsGroup: 0
            runAsUser: 0
          image: "caddy:2.6.2-alpine"
          imagePullPolicy: IfNotPresent
          args:
            - "caddy"
            - "run"
            - "--config=/config/Caddyfile"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: metrics
              containerPort: 9765
              protocol: TCP
          resources: {}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: run-tailscale
              mountPath: /var/run
            - name: config-volume
              mountPath: /config
        - name: tailscale-grafana
          imagePullPolicy: Always
          image: "ghcr.io/tailscale/tailscale:latest"
          env:
            - name: TS_KUBE_SECRET
              value: "tailscale-state-ingress-grafana"
            - name: TS_USERSPACE
              value: "false"
            - name: TS_AUTH_KEY
              valueFrom:
                secretKeyRef:
                  name: tailscale-auth
                  key: TS_AUTH_KEY
                  optional: true
            - name: TS_AUTH_ONCE
              value: "true"
            - name: TS_EXTRA_ARGS
              value: --hostname=grafana
            - name: TS_SOCKET
              value: /var/run/tailscale/tailscaled.sock
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: run-tailscale
              mountPath: /var/run
            - name: tailscale-tmp # cache certs
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
        - name: run-tailscale
          emptyDir: {}
        - name: config-volume
          configMap:
            name: caddy-grafana
  volumeClaimTemplates:
    - metadata:
        name: tailscale-tmp
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "100Mi"
